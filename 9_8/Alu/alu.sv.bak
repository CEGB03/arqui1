module alu#(parameter N=4)
				(input logic [N-1:0] a,b,
				input logic [3:0] ALUControl,
				output logic [N-1:0] Result,
				output logic [3:0] ALUFlags);
				
		//		Se√±ales Internas
		logic neg, zero, acarreo, overflow;
		logic [N-1:0] y, sum;
		logic cin, cout;
		
		
/*	Tabla de funciones de la parte aritemtica de la alu del PPT 
	|seleccion 	 |   entrada   | F=	A	+	Y	+	CIN   |
	|S1		S0	 |      y	  	| 	cin=0		cin=1  	   |
	|0		0	 	 | solo ceros	|	 F=A		F=A+1  	   |		Falsas
	|0		1	 	 |		  B	  	|	F=A+B		F=A+B+1	   |		Falsas
	|1		0	 	 |		 ~B	  	| F= A+ ~B	F= A + ~B+1 |		Verdaderas
	|1		1	 	 |	 solo unos	|	F=A-1		F=A		   |		Verdaderas
*/
		// Asignaciones
		assign cin=ALUControl[0];
		// [1][2] son los que seleccionan que operaciones se hacen
		assign y=ALUControl[2] ? (ALUControl[1] ? {N{1'b1}}//Verdadera, 11
															 : ~b)//Verdadera, 		 10
									  :(ALUControl[1] ? b//Falsa, 				 01
															: {N{1'b0}});//Falsa, 	 00
		// parte aritmetica
		assign {cout, sum}=a+y+cin;
		
		
		always_comb
			casez(ALUControl[3:1])
				3'b0?? : Result=suma;// part aritmetica
				3'b100 : Result=a&b;// part logica
				3'b101 : Result=a|b;// part logica
				3'b110 : Result=a^b;// part logica
				3'b111 : Result=~a;// part logica
			endcase
		//Asignacion de las flags(banderas)
		// en el ppt son c y s
		assign neg=Result[N-1];
		assign zero= ( Result=={N{1'b0}});
		// en el ppt son 
		assign acarreo=(AlUControl[3] == 1'b0) && cout:
		assign overflow=(AlUControl[3] == 1'b0) &&
							 (~a[N-1] & ~y[N-1] & sum[N-1]+
							  a[N-1] & y[N-1] & ~sum[N-1]);
		assign ALUFlags={overflow, neg, zero, acarreo};
endmodule 